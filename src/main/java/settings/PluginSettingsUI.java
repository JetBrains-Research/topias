package settings;

import com.intellij.openapi.application.PathManager;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComponentWithBrowseButton;
import com.intellij.openapi.ui.FixedSizeButton;
import com.intellij.openapi.ui.TextComponentAccessor;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.Nullable;
import settings.enums.DiscrType;

import javax.swing.*;
import java.awt.*;

import static com.intellij.openapi.util.io.FileUtil.toSystemIndependentName;
import static processing.FullProcessInvoker.invoke;

public class PluginSettingsUI {

    public JPanel getSettingsPanel() {
        return settingsPanel;
    }

    public PluginSettingsUI(Project project) {
        final MyPluginSettingsState.InnerState state = MyPluginSettingsState.getInstance(project).getState();

        final DiscrType[] elems = {DiscrType.MONTH, DiscrType.WEEK};
        dateComboBox.setModel(new DefaultComboBoxModel<>(elems));
        dateComboBox.setSelectedItem(DiscrType.getById(state.discrTypeId));


        graphicsCheckBox.setSelected(state.showHistograms);
        final String repoPath = state.gitRootPath;
        final FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFolderDescriptor();
        BrowseFolderListener listener = new BrowseFolderListener("Select Git Root", gitRepoRootPath, descriptor, repoPath);
        gitRepoRootPath.addActionListener(listener);
        gitRepoRootPath.setText(state.gitRootPath);
        refreshButton.setEnabled(state.isRefreshEnabled);
        refreshButton.setFocusable(state.isRefreshEnabled);
        refreshButton.setFocusPainted(true);
        refreshButton.addActionListener(e -> invoke(project, state.isFirstTry));
    }

    private JPanel settingsPanel;
    private JComboBox<DiscrType> dateComboBox;
    private JCheckBox graphicsCheckBox;
    private JLabel graphicsLabel;
    private JLabel showDataLabel;
    private TextFieldWithBrowseButton gitRepoRootPath;
    private JLabel repoPathLabel;
    private JLabel refreshLabel;
    private FixedSizeButton refreshButton;


    public DiscrType getDiscrType() {
        return (DiscrType) dateComboBox.getSelectedItem();
    }

    public boolean isHistogramsEnabled() {
        return graphicsCheckBox.isSelected();
    }

    public String getGitRepoRootPath() {
        return gitRepoRootPath.getText();
    }

    public void setDiscrType(DiscrType discrType) {
        this.dateComboBox.setSelectedItem(discrType);
    }

    public void setHistogramsEnabled(boolean showHistograms) {
        this.graphicsCheckBox.setSelected(showHistograms);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        settingsPanel = new JPanel();
        settingsPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.setBorder(BorderFactory.createTitledBorder("vcs_analysis_plugin"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        settingsPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(55, 62), null, 0, false));
        showDataLabel = new JLabel();
        showDataLabel.setText("Show data for");
        panel1.add(showDataLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        graphicsLabel = new JLabel();
        graphicsLabel.setText("Enable histograms");
        panel1.add(graphicsLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateComboBox = new JComboBox();
        dateComboBox.setEditable(false);
        panel1.add(dateComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        graphicsCheckBox = new JCheckBox();
        graphicsCheckBox.setSelected(true);
        graphicsCheckBox.setText("");
        panel1.add(graphicsCheckBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        settingsPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return settingsPanel;
    }

    private static class BrowseFolderListener extends ComponentWithBrowseButton.BrowseFolderActionListener<JTextField> {
        private final String myDefaultPath;

        BrowseFolderListener(@Nullable String title,
                             ComponentWithBrowseButton<JTextField> textField,
                             FileChooserDescriptor fileChooserDescriptor,
                             @Nullable String defaultPath) {
            super(title, null, textField, null, fileChooserDescriptor, TextComponentAccessor.TEXT_FIELD_WHOLE_TEXT);
            myDefaultPath = defaultPath;
        }

        @Nullable
        @Override
        protected VirtualFile getInitialFile() {
            String dir = super.getComponentText();
            if (!dir.isEmpty()) {
                return super.getInitialFile();
            }

            LocalFileSystem fileSystem = LocalFileSystem.getInstance();
            return fileSystem.findFileByPath(toSystemIndependentName(myDefaultPath == null ? PathManager.getHomePath() : myDefaultPath));
        }
    }
}
