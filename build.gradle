plugins {
    id 'scala'
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.16'
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
}

group 'io.github.likeanowl'
version '1.0.4d'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala', 'src/main/java']
        }
        java {
            srcDirs = []
        }
    }
    test {
        scala {
            srcDirs = ['src/test/scala', 'src/test/java']
        }
        java {
            srcDirs = []
        }
    }
}

intellij {
    version '2019.3'
    plugins 'git4idea', 'java'
    pluginName 'Topias'
    downloadSources true
    updateSinceUntilBuild false
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.13.1'
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.8.0'
    // https://mvnrepository.com/artifact/com.typesafe.slick/slick
    compile group: 'com.typesafe.slick', name: 'slick_2.13', version: '3.3.2'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation files('lib/RefactoringMiner.jar')
    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation group:'org.apache.commons', name:'commons-collections4', version: '4.3'
    implementation group:'org.jfree', name:'jfreechart', version: '1.5.0'
    runtimeClasspath (group: 'org.xerial', name: 'sqlite-jdbc', version: '3.27.2.1'){
        force = true
    }
    // https://mvnrepository.com/artifact/org.scalatest/scalatest
    testCompile group: 'org.scalatest', name: 'scalatest-core_2.13', version: '3.2.0-M4'
    // https://mvnrepository.com/artifact/org.scalatest/scalatest-flatspec
    compile group: 'org.scalatest', name: 'scalatest-flatspec_2.13', version: '3.2.0-M4'
    // https://mvnrepository.com/artifact/org.scalatest/scalatest-matchers-core
    compile group: 'org.scalatest', name: 'scalatest-matchers-core_2.13', version: '3.2.0-M4'

}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}